import path from "path";
import axios from "axios";
import process from "process";
import yaml from "js-yaml";
import readline from "readline";
import AdmZip from "adm-zip";
import zlib from "zlib";
import fs from "fs";
import { fileURLToPath } from "url";
import { readFile, writeFile, mkdir } from "fs/promises";
import { spawn } from "child_process";
import { logger } from "../logger.js";

// proxy parameters
const PROXY_SERVER = "127.0.0.1:7890";
const PROXY_OVERRIDE =
  "localhost;127.*;10.*;172.16.*;172.17.*;172.18.*;172.19.*;172.20.*;172.21.*;172.22.*;172.23.*;172.24.*;172.25.*;172.26.*;172.27.*;172.28.*;172.29.*;172.30.*;172.31.*;192.168.*";

const __filename = fileURLToPath(import.meta.url);

/**
 * 解压 .gz 文件到指定路径
 * @param {string} gzFilePath - .gz 文件路径
 * @param {string} outputFilePath - 解压后的文件路径
 * @returns {Promise<void>}
 */
async function decompressGzFile(gzFilePath, outputFilePath) {
  return new Promise((resolve, reject) => {
    const input = fs.createReadStream(gzFilePath);
    const output = fs.createWriteStream(outputFilePath);
    const gunzip = zlib.createGunzip();

    input.pipe(gunzip).pipe(output);

    output.on("finish", () => {
      logger.info(`文件已成功解压到 ${outputFilePath}`, "clash_init.js");
      resolve();
    });

    output.on("error", (error) => {
      logger.error(`解压文件时发生错误: ${error.message}`, "clash_init.js");
      reject(error);
    });
  });
}

/**
 * @param {string} 上级目录
 * @returns {Promise<void>}
 */
async function downloadMihomoCore(targetPath) {
  const version = "v1.19.10";
  const platform = process.platform;
  const arch = process.arch;

  const gzFilePath = path.join(path.dirname(targetPath), "mihomo.gz");
  const zipFilePath = path.join(path.dirname(targetPath), "mihomo.zip");

  //https://github.com/MetaCubeX/mihomo/releases/download/v1.19.10/mihomo-darwin-amd64-v1.19.10.gz
  //https://github.com/MetaCubeX/mihomo/releases/download/v1.19.10/mihomo-windows-amd64-v1.19.10.zip
  let downloadUrl = `https://github.com/MetaCubeX/mihomo/releases/download/${version}/mihomo-windows-amd64-${version}.zip`;
  logger.info(`正在从 ${downloadUrl} 下载 mihomo 核心...`, "clash_init.js");
  try {
    const response = await axios.get(downloadUrl, {
      responseType: "arraybuffer",
    });
    // await writeFile(gzFilePath, Buffer.from(response.data));
    await writeFile(zipFilePath, Buffer.from(response.data));
    logger.info(`mihomo 核心已成功下载到 ${zipFilePath}`, "clash_init.js");
    logger.info("正在解压 mihomo 核心...", "clash_init.js");
    // await decompressGzFile(gzFilePath, targetPath);
    const zip = new AdmZip(zipFilePath);
    zip.extractAllTo(path.dirname(targetPath), true);
    logger.info(`mihomo 核心已成功解压到 ${targetPath}`, "clash_init.js");
  } catch (error) {
    logger.error(`下载 mihomo 核心时发生错误: ${error.message}`, "clash_init.js");
    throw error;
  }
}

const __dirname = path.dirname(__filename);
const urlFilePath = path.join(__dirname, "url.txt");
const clashExecutablePath = path.join(__dirname, "mihomo-windows-amd64.exe");

/**
 * 下载Clash配置文件
 * @param {string} configUrl - 配置文件URL
 * @param {string} baseDir - 基础目录路径
 * @returns {Promise<string>} 下载的配置文件路径
 */
async function fetchConfig(configUrl, baseDir) {
  try {
    const encodedUrlHash = Buffer.from(configUrl)
      .toString("base64")
      .replace(/[\\/:*?"<>|]/g, "_");
    const configDirectory = path.join(baseDir, encodedUrlHash);
    const downloadedConfigPath = path.join(configDirectory, "config.yaml");

    await mkdir(configDirectory, { recursive: true });
    const response = await axios.get(configUrl, { responseType: "text" });
    await writeFile(downloadedConfigPath, response.data);

    logger.info(`配置文件已成功保存到 ${downloadedConfigPath}`, "clash_init.js");
    return downloadedConfigPath;
  } catch (error) {
    logger.error(`获取配置文件时发生错误: ${error.message}`, "clash_init.js");
    throw error;
  }
}
async function clearSystemProxy() {
  return new Promise((resolve) => {
    logger.info("准备清除系统代理设置...", "clash_init.js");
    const ps = spawn("powershell.exe", [
      "-Command",
      `
        # 设置输出编码为 UTF-8
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        
        # 禁用代理
        Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -name ProxyEnable -value 0
        
        # 刷新代理设置
        $signature = @"
[DllImport("wininet.dll", SetLastError = true, CharSet=CharSet.Auto)]
public static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int lpdwBufferLength);
"@
        $type = Add-Type -MemberDefinition $signature -Name wininet -Namespace pinvoke -PassThru
        $null = $type::InternetSetOption([IntPtr]::Zero, 39, [IntPtr]::Zero, 0)  // 39 = INTERNET_OPTION_SETTINGS_CHANGED
        $null = $type::InternetSetOption([IntPtr]::Zero, 37, [IntPtr]::Zero, 0)  // 37 = INTERNET_OPTION_REFRESH
      `,
    ]);

    ps.stdout.on("data", (data) => {
      logger.info(`[PowerShell]: ${data}`, "clash_init.js");
    });

    ps.stderr.on("data", (data) => {
      logger.error(`[PowerShell error]: ${data}`, "clash_init.js");
    });

    ps.on("close", (code) => {
      if (code === 0) {
        logger.info("PowerShell脚本执行成功", "clash_init.js");
        resolve(true);
      } else {
        logger.error(`PowerShell脚本执行失败，退出码: ${code}`, "clash_init.js");
        resolve(false);
      }
    });
  });
}

async function setSystemProxy() {
  logger.info("准备设置系统代理...", "clash_init.js");
  return new Promise((resolve) => {
    const ps = spawn("powershell.exe", [
      "-Command",
      `
        # 设置输出编码为 UTF-8
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        
        # 设置代理注册表项
        Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -name ProxyEnable -value 1
        Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -name ProxyServer -value "${PROXY_SERVER}"
        Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -name ProxyOverride -value "${PROXY_OVERRIDE}"
        
        # 刷新代理设置
        $signature = @"
[DllImport("wininet.dll", SetLastError = true, CharSet=CharSet.Auto)]
public static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int lpdwBufferLength);
"@
        $type = Add-Type -MemberDefinition $signature -Name wininet -Namespace pinvoke -PassThru
        $null = $type::InternetSetOption([IntPtr]::Zero, 39, [IntPtr]::Zero, 0)  // 39 = INTERNET_OPTION_SETTINGS_CHANGED
        $null = $type::InternetSetOption([IntPtr]::Zero, 37, [IntPtr]::Zero, 0)  // 37 = INTERNET_OPTION_REFRESH
      `,
    ]);

    ps.stdout.on("data", (data) => {
      logger.info(`[PowerShell]: ${data}`, "clash_init.js");
    });

    ps.stderr.on("data", (data) => {
      logger.error(`[PowerShell error]: ${data}`, "clash_init.js");
    });

    ps.on("close", (code) => {
      if (code === 0) {
        logger.info("PowerShell脚本执行成功", "clash_init.js");
        resolve(true);
      } else {
        logger.error(`PowerShell脚本执行失败，退出码: ${code}`, "clash_init.js");
        resolve(false);
      }
    });
  });
}

(async () => {
  try {
    // 读取URL列表文件
    const urlListContent = await readFile(urlFilePath, "utf-8");
    const availableUrls = urlListContent
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line.length > 0);

    if (availableUrls.length === 0) {
      logger.error("没有找到有效的配置文件URL，请检查url.txt文件", "clash_init.js");
      return;
    }

    // 显示URL选项
    logger.info("请选择配置文件编号：", "clash_init.js");
    availableUrls.forEach((url, index) => {
      logger.info(`${index + 1}. ${url}`, "clash_init.js");
    });

    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    // 获取用户选择
    const selectedIndex = await new Promise((resolve) => {
      rl.question("输入编号: ", (answer) => {
        rl.close();
        const index = parseInt(answer) - 1;
        resolve(index);
      });
    });

    // 验证选择有效性
    if (
      isNaN(selectedIndex) ||
      selectedIndex < 0 ||
      selectedIndex >= availableUrls.length
    ) {
      logger.error("无效的选择", "clash_init.js");
      return;
    }

    const selectedConfigUrl = availableUrls[selectedIndex];
    logger.info(`正在获取配置文件: ${selectedConfigUrl}`, "clash_init.js");

    // 下载配置文件
    const downloadedConfigPath = await fetchConfig(
      selectedConfigUrl,
      __dirname
    );

    // mihomo核心下载逻辑 ---
    const coreExists = await readFile(clashExecutablePath)
      .then(() => true)
      .catch(() => false); // 检查核心可执行文件是否存在

    if (!coreExists) {
      logger.info("未找到 mihomo 核心，正在尝试下载...", "clash_init.js");
      try {
        await downloadMihomoCore(clashExecutablePath);
      } catch (downloadError) {
        logger.error(
          `下载 mihomo 核心失败，请手动下载并放置到指定位置: ${clashExecutablePath}`,
          "clash_init.js"
        );
      }
    } else {
      logger.info("已找到 mihomo 核心，跳过下载。", "clash_init.js");
    }

    // 读取并解析配置文件
    const configContent = await readFile(downloadedConfigPath, "utf-8");
    const clashConfig = yaml.load(configContent);
    const proxyPort = clashConfig.port;
    const externalController = clashConfig["external-controller"];

    logger.info(`代理端口: ${proxyPort}`, "clash_init.js");
    logger.info(`外部控制器: ${externalController}`, "clash_init.js");

    logger.info("启动 Clash 服务...", "clash_init.js");
    // 在启动前再次检查核心文件是否存在
    const finalCoreExists = await readFile(clashExecutablePath)
      .then(() => true)
      .catch(() => false);

    if (!finalCoreExists) {
      logger.error(
        "mihomo 核心不存在，无法启动服务。请确保核心文件已下载或放置在正确位置。",
        "clash_init.js"
      );
      return; // 如果核心文件不存在，则退出程序
    }

    const clashProcess = spawn(clashExecutablePath, [
      "-d",
      path.dirname(downloadedConfigPath),
    ]);
    logger.info(`Clash进程ID: ${clashProcess.pid}`, "clash_init.js");

    clashProcess.stdout.on("data", (data) => {
      logger.info(`[clash]: ${data.toString().trim()}`, "clash_init.js");
    });

    clashProcess.stderr.on("data", (data) => {
      logger.error(`[clash error]: ${data.toString().trim()}`, "clash_init.js");
    });

    // 等待Clash启动
    await new Promise((resolve) => setTimeout(resolve, 2000));

    logger.info("设置系统代理...", "clash_init.js");
    const proxySetSuccess = await setSystemProxy();

    if (proxySetSuccess) {
      logger.info("代理设置成功", "clash_init.js");

      // 添加节点选择功能
      try {
        const selectGroup = clashConfig["proxy-groups"].find(
          (group) => group.name === "🔰 选择节点"
        );

        if (selectGroup) {
          logger.info("\n节点列表：", "clash_init.js");
          const proxiesInfo = [];

          // 测试并显示节点延迟
          for (const proxyName of selectGroup.proxies) {
            if (proxyName === "DIRECT") continue;

            try {
              const proxy = clashConfig.proxies.find(
                (p) => p.name === proxyName
              );
              if (!proxy) continue;

              // 测试延迟
              const startTime = Date.now();
              await axios.get("http://www.gstatic.com/generate_204", {
                proxy: {
                  host: "127.0.0.1",
                  port: proxyPort,
                },
                timeout: 5000,
              });
              const latency = Date.now() - startTime;

              proxiesInfo.push({
                name: proxyName,
                server: proxy.server,
                latency: latency,
              });

              logger.info(`${proxyName} - ${latency}ms`, "clash_init.js");
            } catch (error) {
              logger.info(`${proxyName} - 超时`, "clash_init.js");
              proxiesInfo.push({
                name: proxyName,
                server: proxy.server,
                latency: -1,
              });
            }
          }

          // 创建新的readline接口用于节点选择
          const rlNode = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
          });

          // 获取用户选择的节点
          const selectedNodeIndex = await new Promise((resolve) => {
            rlNode.question(
              "\n请选择要使用的节点编号（输入0取消）: ",
              (answer) => {
                rlNode.close();
                resolve(parseInt(answer) - 1);
              }
            );
          });

          if (
            selectedNodeIndex >= 0 &&
            selectedNodeIndex < proxiesInfo.length
          ) {
            const selectedProxy = proxiesInfo[selectedNodeIndex];
            logger.info(`正在切换到节点: ${selectedProxy.name}`, "clash_init.js");

            // 通过API切换节点
            await axios.put(
              `http://${externalController}/proxies/🔰 选择节点`,
              {
                name: selectedProxy.name,
              }
            );

            logger.info("节点切换成功", "clash_init.js");
          }
        }
      } catch (error) {
        logger.error(`节点选择出错: ${error.message}`, "clash_init.js");
      }
    } else {
      logger.info("代理设置失败，请手动设置:", "clash_init.js");
      logger.info("打开Windows设置 -> 网络和Internet -> 代理", "clash_init.js");
      logger.info(
        `地址: ${PROXY_SERVER.split(":")[0]}, 端口: ${PROXY_SERVER.split(":")[1]}`,
        "clash_init.js"
      );
      logger.info(`例外列表: ${PROXY_OVERRIDE}`, "clash_init.js");
    }

    // 注册进程退出处理
    process.on("exit", () => {
      if (!clashProcess.killed) {
        clashProcess.kill("SIGKILL");
      }
    });

    process.on("SIGINT", async () => {
      logger.info("\n正在关闭服务...", "clash_init.js");
      if (!clashProcess.killed) {
        clashProcess.kill("SIGINT");
      }
      logger.info("正在清除系统代理设置...", "clash_init.js");
      await clearSystemProxy();
      process.exit();
    });
  } catch (error) {
    logger.error(`程序运行出错: ${error.message}`, "clash_init.js");
  }
})();